<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Artisan;

class DeployCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'deploy:prepare';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Prepare application for production deployment';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üöÄ Preparando aplica√ß√£o para produ√ß√£o...');
        $this->line('');

        // Verificar ambiente
        if (app()->environment('production')) {
            $this->warn('‚ö†Ô∏è  Voc√™ est√° em ambiente de produ√ß√£o!');
            if (!$this->confirm('Continuar mesmo assim?')) {
                $this->info('‚ùå Opera√ß√£o cancelada.');
                return;
            }
        }

        try {
            // Cache de configura√ß√£o
            $this->info('üìù Cache de configura√ß√£o...');
            Artisan::call('config:cache');
            $this->info('‚úÖ Configura√ß√£o em cache');

            // Cache de rotas
            $this->info('üõ£Ô∏è  Cache de rotas...');
            Artisan::call('route:cache');
            $this->info('‚úÖ Rotas em cache');

            // Cache de views
            $this->info('üëÅÔ∏è  Cache de views...');
            Artisan::call('view:cache');
            $this->info('‚úÖ Views em cache');

            // Otimizar autoloader
            $this->info('‚ö° Otimizando autoloader...');
            Artisan::call('optimize');
            $this->info('‚úÖ Autoloader otimizado');

            // Verificar migra√ß√µes pendentes
            $this->info('üóÑÔ∏è  Verificando migra√ß√µes...');
            Artisan::call('migrate:status');
            $this->info('‚úÖ Status das migra√ß√µes verificado');

            // Limpar logs antigos
            $this->info('üßπ Limpando logs antigos...');
            $logPath = storage_path('logs/laravel.log');
            if (file_exists($logPath) && filesize($logPath) > 10 * 1024 * 1024) { // 10MB
                file_put_contents($logPath, '');
                $this->info('‚úÖ Logs limpos');
            } else {
                $this->info('‚ÑπÔ∏è  Logs n√£o precisam ser limpos');
            }

            $this->line('');
            $this->info('üéâ Aplica√ß√£o preparada para produ√ß√£o!');
            $this->line('');
            $this->info('üìã Pr√≥ximos passos:');
            $this->line('1. Fazer backup do banco de dados');
            $this->line('2. Executar migra√ß√µes: php artisan migrate --force');
            $this->line('3. Verificar permiss√µes dos diret√≥rios storage/');
            $this->line('4. Configurar SSL/HTTPS');
            $this->line('5. Testar funcionalidades cr√≠ticas');

        } catch (\Exception $e) {
            $this->error('‚ùå Erro durante a prepara√ß√£o: ' . $e->getMessage());
            $this->line('');
            $this->info('üîß Solu√ß√µes poss√≠veis:');
            $this->line('1. Verifique as configura√ß√µes do banco de dados');
            $this->line('2. Execute: php artisan config:clear');
            $this->line('3. Execute: php artisan cache:clear');
            $this->line('4. Verifique permiss√µes dos diret√≥rios');
        }
    }
}

name: Laravel Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configurar PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql, zip, gd, curl, sqlite3, pdo_sqlite
          coverage: none

      # 3. Configurar Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      # 4. Instalar dependências PHP
      - name: Install PHP dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction

      # 5. Instalar dependências Node.js
      - name: Install Node dependencies
        run: npm ci

      # 6. Build assets
      - name: Build assets
        run: npm run build

      # 7. Configurar aplicação Laravel
      - name: Setup Laravel
        run: |
          cp .env.example .env
          php artisan key:generate --no-interaction
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      # 8. Executar migrações (opcional - descomente se necessário)
      - name: Run migrations
        run: php artisan migrate --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      # 9. Criar arquivo de configuração de produção
      - name: Create production config
        run: |
          echo "APP_NAME=\"Genios_Infotech\"" > .env.production
          echo "APP_ENV=production" >> .env.production
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env.production
          echo "APP_DEBUG=false" >> .env.production
          echo "APP_URL=${{ secrets.APP_URL }}" >> .env.production
          echo "" >> .env.production
          echo "DB_CONNECTION=mysql" >> .env.production
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.production
          echo "DB_PORT=3306" >> .env.production
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env.production
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env.production
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.production
          echo "" >> .env.production
          echo "MAIL_MAILER=smtp" >> .env.production
          echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env.production
          echo "MAIL_PORT=587" >> .env.production
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env.production
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env.production
          echo "MAIL_ENCRYPTION=tls" >> .env.production
          echo "MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}" >> .env.production
          echo "MAIL_FROM_NAME=\"Genios Infotech\"" >> .env.production

      # 10. Preparar arquivos para deploy
      - name: Prepare deployment files
        run: |
          # Criar diretório de deploy
          mkdir -p deploy
          
          # Copiar apenas arquivos essenciais
          cp -r app deploy/
          cp -r bootstrap deploy/
          cp -r config deploy/
          cp -r database deploy/
          cp -r public deploy/
          cp -r resources deploy/
          cp -r routes deploy/
          cp -r storage deploy/
          cp -r vendor deploy/
          cp -r .env.production deploy/.env
          
          # Copiar arquivos de configuração essenciais
          cp artisan deploy/
          cp composer.json deploy/
          cp composer.lock deploy/
          
          # Criar diretórios necessários
          mkdir -p deploy/storage/logs
          mkdir -p deploy/storage/framework/cache
          mkdir -p deploy/storage/framework/sessions
          mkdir -p deploy/storage/framework/views
          mkdir -p deploy/storage/app/public
          
          # Definir permissões
          chmod -R 755 deploy/storage
          chmod -R 755 deploy/bootstrap/cache
          
          # Limpar arquivos desnecessários do vendor
          find deploy/vendor -name "*.md" -delete
          find deploy/vendor -name "*.txt" -delete
          find deploy/vendor -name "LICENSE*" -delete
          find deploy/vendor -name "CHANGELOG*" -delete
          find deploy/vendor -name "*.xml" -delete
          find deploy/vendor -name "*.yml" -delete
          find deploy/vendor -name "*.yaml" -delete
          find deploy/vendor -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true
          find deploy/vendor -name "test" -type d -exec rm -rf {} + 2>/dev/null || true
          find deploy/vendor -name "docs" -type d -exec rm -rf {} + 2>/dev/null || true
          find deploy/vendor -name "doc" -type d -exec rm -rf {} + 2>/dev/null || true

      # 11. Deploy via FTP
      - name: Deploy to server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./deploy/
          server-dir: ${{ secrets.FTP_SERVER_DIR }}
          log-level: minimal
          dry-run: false
          exclude: |
            **/.git*
            **/.github*
            **/node_modules/**
            **/tests/**
            **/.env.example
            **/README.md
            **/phpunit.xml
            **/storage/logs/*
            **/storage/framework/cache/*
            **/storage/framework/sessions/*
            **/storage/framework/views/*
            **/vendor/**/*.md
            **/vendor/**/*.txt
            **/vendor/**/LICENSE*
            **/vendor/**/CHANGELOG*
            **/vendor/**/*.xml
            **/vendor/**/*.yml
            **/vendor/**/*.yaml
            **/vendor/**/tests/**
            **/vendor/**/test/**
            **/vendor/**/docs/**
            **/vendor/**/doc/**
            **/vendor/**/.git/**
            **/vendor/**/.github/**

      # 12. Configurar permissões no servidor (opcional)
      # - name: Setup server permissions
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.SSH_HOST }}
      #     username: ${{ secrets.SSH_USERNAME }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       cd ${{ secrets.SSH_WORK_DIR }}
      #       chmod -R 755 storage
      #       chmod -R 755 bootstrap/cache
      #       php artisan config:cache
      #       php artisan route:cache
      #       php artisan view:cache
      #       php artisan migrate --force

      # 13. Notificação de sucesso
      - name: Deployment success
        run: echo "✅ Deploy realizado com sucesso!"
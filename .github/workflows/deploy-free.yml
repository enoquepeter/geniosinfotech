name: Laravel Deploy to Free Server (FTP Only - OPTIMIZED)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do c√≥digo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configurar PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, mysql, zip, gd, curl, sqlite3, pdo_sqlite
          coverage: none

      # 3. Configurar Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      # 4. Instalar depend√™ncias Node.js
      - name: Install Node dependencies
        run: npm ci

      # 5. Build assets
      - name: Build assets
        run: npm run build

      # 6. Criar arquivo de configura√ß√£o de produ√ß√£o
      - name: Create production config
        run: |
          echo "APP_NAME=\"Genios_Infotech\"" > .env.production
          echo "APP_ENV=production" >> .env.production
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env.production
          echo "APP_DEBUG=false" >> .env.production
          echo "APP_URL=${{ secrets.APP_URL }}" >> .env.production
          echo "" >> .env.production
          echo "DB_CONNECTION=mysql" >> .env.production
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.production
          echo "DB_PORT=3306" >> .env.production
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env.production
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env.production
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.production
          echo "" >> .env.production
          echo "MAIL_MAILER=smtp" >> .env.production
          echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env.production
          echo "MAIL_PORT=587" >> .env.production
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env.production
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env.production
          echo "MAIL_ENCRYPTION=tls" >> .env.production
          echo "MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}" >> .env.production
          echo "MAIL_FROM_NAME=\"Genios Infotech\"" >> .env.production

      # 7. Preparar arquivos para deploy (SEM VENDOR)
      - name: Prepare deployment files
        run: |
          # Criar diret√≥rio de deploy
          mkdir -p deploy
          
          # Copiar apenas arquivos essenciais (SEM VENDOR)
          cp -r app deploy/
          cp -r bootstrap deploy/
          cp -r config deploy/
          cp -r database deploy/
          cp -r public deploy/
          cp -r resources deploy/
          cp -r routes deploy/
          cp -r storage deploy/
          cp -r .env.production deploy/.env
          
          # Copiar arquivos de configura√ß√£o essenciais
          cp artisan deploy/
          cp composer.json deploy/
          cp composer.lock deploy/
          
          # Criar diret√≥rios necess√°rios
          mkdir -p deploy/storage/logs
          mkdir -p deploy/storage/framework/cache
          mkdir -p deploy/storage/framework/sessions
          mkdir -p deploy/storage/framework/views
          mkdir -p deploy/storage/app/public
          
          # Definir permiss√µes
          chmod -R 755 deploy/storage
          chmod -R 755 deploy/bootstrap/cache
          
          echo "‚úÖ Arquivos preparados para deploy (sem vendor)"

      # 8. Deploy via FTP (OTIMIZADO)
      - name: Deploy to server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./deploy/
          server-dir: ${{ secrets.FTP_SERVER_DIR }}
          log-level: minimal
          dry-run: false
          exclude: |
            **/.git*
            **/.github*
            **/node_modules/**
            **/tests/**
            **/.env.example
            **/README.md
            **/phpunit.xml
            **/storage/logs/*
            **/storage/framework/cache/*
            **/storage/framework/sessions/*
            **/storage/framework/views/*

      # 9. Instru√ß√µes para instalar vendor manualmente
      - name: Manual vendor installation instructions
        run: |
          echo "üìã INSTRU√á√ïES PARA INSTALAR VENDOR NO SERVIDOR:"
          echo ""
          echo "1. Acesse o painel de controle do seu provedor"
          echo "2. V√° para 'Terminal' ou 'SSH' (se dispon√≠vel)"
          echo "3. Execute os comandos:"
          echo "   cd /caminho/do/seu/site"
          echo "   composer install --no-dev --optimize-autoloader"
          echo "   php artisan config:cache"
          echo "   php artisan route:cache"
          echo "   php artisan view:cache"
          echo "   php artisan migrate --force"
          echo ""
          echo "4. Se n√£o tiver SSH, use o File Manager:"
          echo "   - Fa√ßa upload do arquivo composer.phar"
          echo "   - Execute via painel web"
          echo ""
          echo "‚úÖ Deploy conclu√≠do! Tempo estimado: 5-10 minutos"

      # 10. Notifica√ß√£o de sucesso
      - name: Deployment success
        run: echo "‚úÖ Deploy realizado com sucesso! Instale o vendor manualmente."
